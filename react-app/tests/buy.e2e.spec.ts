import { test, expect } from '@playwright/test';
import { login } from './login';

const FRONTEND_URL = 'http://localhost:5173';

test.describe('üéüÔ∏è Flujo completo de compra con Stripe (mixto enumerado + no enumerado)', () => {
  test('Usuario compra entradas enumeradas y no enumeradas exitosamente', async ({ page }) => {
    // 1Ô∏è‚É£ LOGIN
    await login(page);

    // 2Ô∏è‚É£ IR AL EVENTO (debe tener sectores enumerados y no enumerados)
    const EVENT_URL = `${FRONTEND_URL}/event/1`;
    await page.goto(EVENT_URL, { waitUntil: 'networkidle' });

    await expect(page.locator('h1')).toBeVisible({ timeout: 15000 });
    console.log('üé≠ Entr√≥ al evento correctamente');

    // 3Ô∏è‚É£ ESPERAR QUE CARGUEN LOS SECTORES / ENTRADAS
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(1000);

    // 4Ô∏è‚É£ SELECCIONAR UNA ENTRADA NO ENUMERADA (si existe)
    try {
      const generalSelect = page.locator('select#general-quantity');
      if (await generalSelect.count() > 0) {
        await generalSelect.waitFor({ state: 'visible', timeout: 10000 });
        const options = await generalSelect.locator('option').allTextContents();
        console.log('üîç Opciones de entrada general:', options);
        await generalSelect.selectOption('1');
        console.log('üé´ Entrada general seleccionada (1 unidad)');
      } else {
        console.warn('‚ö†Ô∏è No se encontr√≥ selector de entrada general ‚Äî el evento podr√≠a no tener entradas no enumeradas.');
      }
    } catch (err) {
      console.error('‚ùå Error al seleccionar entrada no enumerada:', err);
    }

    // 5Ô∏è‚É£ ABRIR UN SECTOR ENUMERADO DESDE EL PLANO
    const sectorEnumerado = page.locator('[class*="sectorArea"]').first();
    try {
      await expect(sectorEnumerado).toBeVisible({ timeout: 10000 });
      await sectorEnumerado.click({ force: true });
      console.log('ü™ë Sector enumerado clickeado');
    } catch (err) {
      console.error('‚ö†Ô∏è No se encontr√≥ sector enumerado visible:', err);
    }

    // 6Ô∏è‚É£ ESPERAR A QUE APAREZCA EL MODAL DE ASIENTOS
    await page.waitForTimeout(1500);
    await page.waitForSelector('.SeatSelector_seat__', { timeout: 10000 });
    console.log('üìã Modal de asientos visible');

    // 7Ô∏è‚É£ SELECCIONAR UN ASIENTO DISPONIBLE
    let seatClicked = false;
    const possibleSelectors = [
      '.SeatSelector_seat__available',
      '[data-testid^="seat-available-"]',
      '.SeatSelector_seat__'
    ];

    for (const sel of possibleSelectors) {
      const seats = page.locator(sel);
      if ((await seats.count()) > 0) {
        for (let i = 0; i < (await seats.count()); i++) {
          const s = seats.nth(i);
          const isDisabled = await s.evaluate(el => el.classList.contains('SeatSelector_reserved__'));
          if (!isDisabled && await s.isVisible()) {
            await s.click({ force: true });
            seatClicked = true;
            console.log(`üí∫ Asiento seleccionado (${sel})`);
            break;
          }
        }
        if (seatClicked) break;
      }
    }

    if (!seatClicked) {
      console.warn('‚ö†Ô∏è No se encontr√≥ asiento disponible para seleccionar');
    }

    // 8Ô∏è‚É£ CONFIRMAR ASIENTO EN MODAL
    try {
      const addSeatBtn = page.locator('button:has-text("Agregar al carrito")');
      await expect(addSeatBtn).toBeVisible({ timeout: 10000 });
      await addSeatBtn.click();
      console.log('‚úÖ Asiento agregado al carrito');
    } catch {
      console.warn('‚ö†Ô∏è Bot√≥n de "Agregar al carrito" no encontrado o ya cerrado');
    }

    // 9Ô∏è‚É£ AGREGAR ENTRADA GENERAL (si todav√≠a existe bot√≥n)
    try {
      const addGeneralBtn = page.locator('button:has-text("Agregar al Carrito")');
      if (await addGeneralBtn.isVisible({ timeout: 5000 })) {
        await addGeneralBtn.click();
        console.log('üõí Entrada general agregada al carrito');
      }
    } catch {
      console.warn('‚ö†Ô∏è Bot√≥n de agregar general no encontrado (posiblemente ya en carrito)');
    }

    // üîü ESPERAR REDIRECCI√ìN AL CARRITO
    await page.waitForURL('**/cart', { timeout: 25000 });
    await expect(page.locator('h2', { hasText: 'Carrito de compras' })).toBeVisible({ timeout: 10000 });
    console.log('üßæ Carrito cargado correctamente con las entradas');

    // 11Ô∏è‚É£ PROCEDER AL PAGO
    const payBtn = page.locator('button:has-text("Proceder al pago")');
    await expect(payBtn).toBeVisible({ timeout: 10000 });
    await payBtn.click();
    console.log('üí≥ Click en "Proceder al pago"');

    await page.waitForURL('**/pay', { timeout: 20000 });
    await expect(page.locator('h1', { hasText: 'Finalizar compra' })).toBeVisible({ timeout: 10000 });
    console.log('üí∞ P√°gina de pago cargada correctamente');

    // 12Ô∏è‚É£ MOCK DE STRIPE
    await page.route('**/api/stripe/checkout', async (route) => {
      console.log('üß© Interceptado /api/stripe/checkout (mock)');
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({ url: `${FRONTEND_URL}/pay/success` }),
      });
    });

    // 13Ô∏è‚É£ CLICK EN PAGAR CON STRIPE
    const stripeBtn = page.locator('button:has-text("Pagar con Stripe")');
    await expect(stripeBtn).toBeVisible({ timeout: 10000 });
    await stripeBtn.click();
    console.log('üí∏ Pago con Stripe simulado (mock)');

    // 14Ô∏è‚É£ VALIDAR PANTALLA DE √âXITO
    await page.waitForURL('**/pay/success', { timeout: 25000 });
    await expect(page.locator('h1', { hasText: '¬°Pago exitoso!' })).toBeVisible({ timeout: 10000 });
    await expect(page.locator('text=Tu compra se proces√≥ correctamente')).toBeVisible();
    console.log('üéâ Compra completada exitosamente');

    // 15Ô∏è‚É£ VALIDAR BOTONES FINALES
    await expect(page.locator('button:has-text("Ver mis tickets")')).toBeVisible({ timeout: 8000 });
    await expect(page.locator('button:has-text("Volver a la tienda")')).toBeVisible({ timeout: 8000 });
    console.log('‚úÖ Botones finales visibles. Test mixto completado con √©xito.');
  });
});
